import java_cup.runtime.Symbol;

%%

CASE = [Cc][Aa][Ss][Ee]
CLASS = [Cc][Ll][Aa][Ss][Ss]
ELSE = [Ee][Ll][Ss][Ee]
ESAC = [Ee][Ss][Aa][Cc]
FI = [Ff][Ii]
IF = [Ii][Ff]
IN = [Ii][Nn]
INHERITS = [Ii][Nn][Hh][Ee][Rr][Ii][Tt][Ss]
ISVOID = [Ii][Ss][Vv][Oo][Ii][Dd]
LET = [Ll][Ee][Tt]
LOOP = [Ll][Oo][Oo][Pp]
NEW = [Nn][Ee][Ww]
NOT = [Nn][Oo][Tt]
OF = [Oo][Ff]
POOL = [Pp][Oo][Oo][Ll]
THEN = [Tt][Hh][Ee][Nn]
WHILE = [wW][Hh][Ii][Ll][Ee]

ASSIGN = <-
DARROW = =>

BACKSPACE = \\b
CARRIAGE = \\r
FORMFEED = \\f
NEWLINE = \\n
TAB = \\t

WHITESPACE = ({BACKSPACE}|{CARRIAGE}|{FORMFEED}|{NEWLINE}|{TAB})

CHARACTER = ([^\n\r\"\\])+
SCAPEDCHARACTER = (\\([\\\"]|[^brfnt0]))*

CHARCOMMENTS = ([^\*\)]|\*[^\)]|[^\*]\))*
ONELINECOMMENTS = ([^\n])*

INT_CONST = [0-9]+
BOOL_CONST = (t[Rr][Uu][Ee])|(f[Aa][Ll][Ss][Ee])

TYPEID = [A-Z]([a-zA-Z0-9_]*)
OBJECTID = [a-z]([a-zA-Z0-9_]*)

LE = <DUMMY>
LET_STMT = <DUMMY>

NONNEWLINE_WHITE_SPACE_CHAR=[\ \t\b\012]

%class CoolScanner
%line
%type Token
%state DUMMY
%state READCHAR
%state READCOMMENT
%state READONELINECOMMENT
%cup

%{
    private String str_buffer = "";
    private String filename = "";

    public int getCurrentLineNumber() {
        return (yyline + 1);
    }

    public String getCurrentFileName() {
        return filename;
    }

    public void setCurrentFileName(String filename) {
        this.filename = filename;
    }
%} 

%eofval{
    return null;
%eofval}

%%

<YYINITIAL> \+ { return new Symbol(sym.PLUS, new Token(yytext(), Token.PLUS)); }
<YYINITIAL> - { return new Symbol(sym.MINUS, new Token(yytext(), Token.MINUS)); }
<YYINITIAL> = { return new Symbol(sym.EQ, new Token(yytext(), Token.EQ)); }
<YYINITIAL> / { return new Symbol(sym.DIV, new Token(yytext(), Token.DIV)); }
<YYINITIAL> < { return new Symbol(sym.LT, new Token(yytext(), Token.LT)); }
<YYINITIAL> \. { return new Symbol(sym.DOT, new Token(yytext(), Token.DOT)); }
<YYINITIAL> ~ { return new Symbol(sym.NEG, new Token(yytext(), Token.NEG)); }
<YYINITIAL> , { return new Symbol(sym.COMMA, new Token(yytext(), Token.COMMA)); }
<YYINITIAL> ; { return new Symbol(sym.SEMI, new Token(yytext(), Token.SEMI)); }
<YYINITIAL> : { return new Symbol(sym.COLON, new Token(yytext(), Token.COLON)); }
<YYINITIAL> \) { return new Symbol(sym.RPAREN, new Token(yytext(), Token.RPAREN)); }
<YYINITIAL> @ { return new Symbol(sym.AT, new Token(yytext(), Token.AT)); }
<YYINITIAL> \{ { return new Symbol(sym.LBRACE, new Token(yytext(), Token.LBRACE)); }
<YYINITIAL> \} { return new Symbol(sym.RBRACE, new Token(yytext(), Token.RBRACE)); }
<YYINITIAL> \{ { return new Symbol(sym.LBRACE, new Token(yytext(), Token.LBRACE)); }
<YYINITIAL> \} { return new Symbol(sym.RBRACE, new Token(yytext(), Token.RBRACE)); }
<YYINITIAL> \* { return new Symbol(sym.MULT, new Token(yytext(), Token.MULT)); }
<YYINITIAL> \( { return new Symbol(sym.LPAREN, new Token(yytext(), Token.LPAREN)); }

<READCOMMENT> {CHARCOMMENTS} {
    /*Ignore*/
}

<READCOMMENT> \*\) {
    yybegin(YYINITIAL);
}

<READCOMMENT> <<EOF>> {
    System.err.println("Error at line " + (yyline + 1));
    System.err.println("Can not leave comment open");
    yybegin(YYINITIAL);
    return new Symbol(sym.ERROR, new Token(str_buffer, Token.ERROR));
}

<READONELINECOMMENT> {ONELINECOMMENTS} {
     yybegin(YYINITIAL);
}

<READONELINECOMMENT> <<EOF>>|\n {
    /*Ignore*/
}

<READCHAR> {CHARACTER}|{WHITESPACE} {
    str_buffer += yytext();
}

<READCHAR> {SCAPEDCHARACTER} {
    str_buffer += yytext().replace("\\", "");
}

<READCHAR> <<EOF>> {
    System.err.println("Error at line " + (yyline + 1));
    System.err.println("Can not leave quotes open");
    yybegin(YYINITIAL);
    return new Symbol(sym.ERROR, new Token(str_buffer, Token.ERROR));
}
<READCHAR> \n {
    System.err.println("Error at line " + (yyline + 1));
    System.err.println("Can not enter a new line without scape character");
    yybegin(YYINITIAL);
    return new Symbol(sym.ERROR, new Token(str_buffer, Token.ERROR));
}
<READCHAR> \" {
    yybegin(YYINITIAL);
    return new Symbol(sym.STR_CONST, new Token(str_buffer, Token.STR_CONST));
}

<YYINITIAL> {NONNEWLINE_WHITE_SPACE_CHAR}+ { }

<YYINITIAL> \" {
    str_buffer = "";
    yybegin(READCHAR);
}

<YYINITIAL> \(\* {
    str_buffer = "";
    yybegin(READCOMMENT);
}

<YYINITIAL> -- {
    str_buffer = "";
    yybegin(READONELINECOMMENT);
}

{CASE} { return new Symbol(sym.CASE, new Token("case", Token.CASE));}
{CLASS} { return new Symbol(sym.CLASS, new Token("class", Token.CLASS));}
{ELSE} { return new Symbol(sym.ELSE, new Token("else", Token.ELSE));}
{ESAC} { return new Symbol(sym.ESAC, new Token("esac", Token.ESAC));}
{FI} { return new Symbol(sym.FI, new Token("fi", Token.FI));}
{IF} { return new Symbol(sym.IF, new Token("if", Token.IF));}
{IN} { return new Symbol(sym.IN, new Token("in", Token.IN));}
{INHERITS} { return new Symbol(sym.INHERITS, new Token("inherits", Token.INHERITS));}
{ISVOID} { return new Symbol(sym.ISVOID, new Token("isvoid", Token.ISVOID));}
{LET} { return new Symbol(sym.LET, new Token("let", Token.LET));}
{LOOP} { return new Symbol(sym.LOOP, new Token("loop", Token.LOOP));}
{NEW} { return new Symbol(sym.NEW, new Token("new", Token.NEW));}
{NOT} { return new Symbol(sym.NOT, new Token("not", Token.NOT));}
{OF} { return new Symbol(sym.OF, new Token("of", Token.OF));}
{POOL} { return new Symbol(sym.POOL, new Token("pool", Token.POOL));}
{THEN} { return new Symbol(sym.THEN, new Token("then", Token.THEN));}
{WHILE} { return new Symbol(sym.WHILE, new Token("while", Token.WHILE));}

{ASSIGN}        { return new Symbol(sym.ASSIGN, new Token(yytext(), Token.ASSIGN));}
{DARROW}        { return new Symbol(sym.DARROW, new Token(yytext(), Token.DARROW));}

{INT_CONST}     { return new Symbol(sym.INT_CONST, new Token(yytext(), Token.INT_CONST));}
{BOOL_CONST}    { return new Symbol(sym.BOOL_CONST, new Token(yytext(), Token.BOOL_CONST));}

{TYPEID}        { return new Symbol(sym.TYPEID, new Token(yytext(), Token.TYPEID));}
{OBJECTID}      { return new Symbol(sym.OBJECTID, new Token(yytext(), Token.OBJECTID));}

[^]         { System.err.println("Invalid sequence at line " + (yyline + 1) + " : "+ yytext()); return new Symbol(sym.ERROR, new Token(yytext(), Token.ERROR));}

<DUMMY>.        { return null; }
